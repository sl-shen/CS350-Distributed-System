package main

//
// a MR application you need to develop
// go build -buildmode=plugin credit.go
//

import (
	"cs350/mr"
	"strconv"
	"strings"
	"bufio"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// your inplementation here

	// create a slice to store key-value pairs
    kva := []mr.KeyValue{}

	// Create a Scanner to read from the contents string
    scanner := bufio.NewScanner(strings.NewReader(contents))

    // Iterate over each line in the contents
    for scanner.Scan() {
		// get the line
        line := scanner.Text()     

        // Split the line by comma, parts here is a slice
        parts := strings.Split(line, ",")

		// convert string to int, '_' is used to ignore returned err
		year, _ := strconv.Atoi(parts[2])
        creditScore, _ := strconv.Atoi(parts[3])
		
		// if yearis 2023 and credit score is larger than 400, then append the name and count 1
		if year == 2023 && creditScore > 400 {
			kv := mr.KeyValue{parts[1], "1"}
			kva = append(kva, kv)
		}
	}

	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
